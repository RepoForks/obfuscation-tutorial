apply plugin: 'com.android.library'
apply plugin: "android-apt"
apply plugin: 'maven'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {

        publishNonDefault true
        defaultPublishConfig 'release'

        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName VERSION_NAME

        // Android default proguard file
        //
        // the optimized version is needed, otherwise the proguard repackaging feature will not be enabled.
        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt')

        // My library proguard file
        proguardFiles 'proguard/proguard-library.pro'

        // apply third party proguard files on the project (for example to keep retrofit annotations)
        proguardFiles 'proguard/proguard-square-okhttp3.pro'
        proguardFiles 'proguard/proguard-square-retrofit2.pro'
        proguardFiles 'proguard/proguard-square-okio.pro'

        // Proguard files that the application using my sdk will need
        consumerProguardFiles 'proguard/proguard-library-consumer.pro'

        // Proguard files of the dependencies of my SDK
        // All the applications using my SDK and proguard will require these files.
        consumerProguardFiles 'proguard/proguard-square-okhttp3.pro'
        consumerProguardFiles 'proguard/proguard-square-retrofit2.pro'
        consumerProguardFiles 'proguard/proguard-square-okio.pro'

    }
    buildTypes {
        release {
            minifyEnabled true
        }
    }


}

dependencies {

    // AutoValue
    provided 'com.google.auto.value:auto-value:1.3'
    apt 'com.google.auto.value:auto-value:1.3'
    compile 'com.google.code.gson:gson:2.8.0'
    apt 'com.ryanharter.auto.value:auto-value-gson:0.4.6'
    provided 'com.ryanharter.auto.value:auto-value-gson:0.4.6'

    // metadata for API consumers
    compile 'com.android.support:support-annotations:23.3.0'

    // http client
    compile 'com.squareup.okhttp3:okhttp:3.2.0'

    // rest client
    compile 'com.squareup.retrofit2:retrofit:2.0.2'
    compile 'com.squareup.retrofit2:converter-gson:2.0.2'

    // tests dependencies
    testCompile "org.robolectric:robolectric:3.0"
    testCompile 'junit:junit:4.12'
    testCompile 'com.squareup.okhttp3:mockwebserver:3.2.0'
}

uploadArchives {
    repositories {
        mavenDeployer {

            // Replace this with your maven repository
            repository(url: "file:///${buildDir}/deploy/")
            pom.groupId = GROUP
            pom.artifactId = POM_ARTIFACT_ID
            pom.version = VERSION_NAME
            pom.project {
                name POM_NAME
                packaging POM_PACKAGING
            }
        }
    }
}

afterEvaluate { project ->

    // Android publishNonDefault will package all the variant in the output. To prevent this behavior, we must remove the default artifacts
    // and manually package the defaultPublishConfig, which is the variant that we want to package

    // removing the default behavior
    configurations.archives.artifacts.removeAll { true }

    android.libraryVariants.all { variant ->

        // defaultPublishConfig found
        if (variant.name == android.defaultPublishConfig) {

            def bundleTask = tasks["bundle${name.capitalize()}"]

            // add the .aar file in the output
            artifacts {
                archives(bundleTask.archivePath) {
                    classifier null
                    builtBy bundleTask
                }
            }

            // Add the mapping file of proguard in the output, if any
            File mappingFile = variant.getMappingFile();
            if (mappingFile != null) {
                artifacts {
                    archives(mappingFile) {
                        classifier "mapping"
                        builtBy bundleTask
                    }
                }
            }
        }
    }
}